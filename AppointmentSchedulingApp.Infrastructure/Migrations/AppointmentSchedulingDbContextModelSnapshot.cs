// <auto-generated />
using System;
using AppointmentSchedulingApp.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppointmentSchedulingApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppointmentSchedulingDbContext))]
    partial class AppointmentSchedulingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Certification", b =>
                {
                    b.Property<int>("CertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificationId"));

                    b.Property<string>("CertificationUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("CertificationId")
                        .HasName("PK__Certific__1237E58AB741FCD4");

                    b.HasIndex("DoctorId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime>("CommentOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfLikes")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("RepliedCommentId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__C3B4DFCAAE40BEA3");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviceId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Functionality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DeviceId")
                        .HasName("PK__Devices__49E123118980F03E");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("AcademicTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Degree")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DoctorDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchProject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingProcess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkExperience")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId")
                        .HasName("PK__Doctors__2DC00EBF6F36E191");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.DoctorSchedule", b =>
                {
                    b.Property<int>("DoctorScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorScheduleId"));

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.HasKey("DoctorScheduleId")
                        .HasName("PK__DoctorSc__8B4DFC5CD30BE55C");

                    b.HasIndex("DoctorId");

                    b.HasIndex("RoomId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SlotId");

                    b.ToTable("DoctorSchedules");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("DoctorFeedbackContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorFeedbackGrade")
                        .HasColumnType("int");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceFeedbackContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceFeedbackGrade")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__6A4BEDD64AB1673C");

                    b.HasIndex("ServiceId");

                    b.HasIndex(new[] { "ReservationId" }, "UQ__Feedback__B7EE5F25C721B5E5")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("Symptoms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalRecordId")
                        .HasName("PK__MedicalR__4411BA22CCBEB984");

                    b.HasIndex("ReservationId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("GuardianId")
                        .HasColumnType("int");

                    b.Property<string>("MainCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("PatientId")
                        .HasName("PK__Patients__970EC3664AE6209D");

                    b.HasIndex("GuardianId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ReceptionistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__9B556A381812807C");

                    b.HasIndex("ReceptionistId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int?>("PostAuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime>("PostCreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PostDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostSourceUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PostId")
                        .HasName("PK__Posts__AA126018DCE7DADC");

                    b.HasIndex("PostAuthorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.PostSection", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"));

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("PostImageUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("SectionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionIndex")
                        .HasColumnType("int");

                    b.Property<string>("SectionTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("SectionId")
                        .HasName("PK__PostSect__80EF08722BF9FE52");

                    b.HasIndex("PostId");

                    b.ToTable("PostSections");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Receptionist", b =>
                {
                    b.Property<int>("ReceptionistId")
                        .HasColumnType("int");

                    b.Property<string>("Shift")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Ca sáng");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Đang làm việc");

                    b.HasKey("ReceptionistId")
                        .HasName("PK__Receptio__0F8C20A81DE4255C");

                    b.ToTable("Receptionists");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("DoctorScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PriorExaminationImg")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ReservationId")
                        .HasName("PK__Reservat__B7EE5F24AFF1158C");

                    b.HasIndex("DoctorScheduleId");

                    b.HasIndex("PatientId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE1A557EF530");

                    b.HasIndex(new[] { "RoleName" }, "RoleName_Unique")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoomId")
                        .HasName("PK__Rooms__32863939A48A4918");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<TimeOnly?>("EstimatedTime")
                        .HasColumnType("time");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsPrepayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Overview")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Process")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<int?>("RatingCount")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentTechniques")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId")
                        .HasName("PK__Services__C51BB00A0B623271");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Slot", b =>
                {
                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("SlotEndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<TimeOnly?>("SlotStartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("SlotId")
                        .HasName("PK__Slots__0A124AAF0239F88E");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Specialty", b =>
                {
                    b.Property<int>("SpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialtyId"));

                    b.Property<string>("Image")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValue("https://th.bing.com/th/id/OIP.5kVbDAdvd-TbbhL31d-2sgHaE4?w=264&h=180&c=7&r=0&o=5&dpr=1.3&pid=1.7");

                    b.Property<string>("SpecialtyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialtyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SpecialtyId")
                        .HasName("PK__Specialt__D768F6A80D2E07D8");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("CitizenId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<bool?>("IsVerify")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4C08BB0715");

                    b.HasIndex(new[] { "Phone" }, "Phone_Unique")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DeviceService", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "DeviceId")
                        .HasName("PK__DeviceSe__C185A23BEEEB907C");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceServices", (string)null);
                });

            modelBuilder.Entity("DoctorService", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "ServiceId")
                        .HasName("PK__DoctorSe__9191B5BFFC89575F");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorServices", (string)null);
                });

            modelBuilder.Entity("DoctorSpecialty", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "SpecialtyId")
                        .HasName("PK__DoctorSp__B0B681D5D3C857AF");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("DoctorSpecialties", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__UserRole__AF2760AD0E8BF207");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Certification", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Certifications")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("Certification_FK");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Comment", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Post");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Comments_User");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.User", "DoctorNavigation")
                        .WithOne("Doctor")
                        .HasForeignKey("AppointmentSchedulingApp.Domain.Entities.Doctor", "DoctorId")
                        .IsRequired()
                        .HasConstraintName("Doctor_FK");

                    b.Navigation("DoctorNavigation");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.DoctorSchedule", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("DoctorId_FK");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Room", "Room")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("RoomId_FK");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Service", "Service")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("ServiceId_FK");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Slot", "Slot")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("SlotId_FK");

                    b.Navigation("Doctor");

                    b.Navigation("Room");

                    b.Navigation("Service");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Reservation", "Reservation")
                        .WithOne("Feedback")
                        .HasForeignKey("AppointmentSchedulingApp.Domain.Entities.Feedback", "ReservationId")
                        .IsRequired()
                        .HasConstraintName("ReservationId_FK");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_Feedbacks_Service");

                    b.Navigation("Reservation");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.MedicalRecord", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Reservation", "Reservation")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservationId");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Patient", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.User", "Guardian")
                        .WithMany("PatientGuardians")
                        .HasForeignKey("GuardianId")
                        .HasConstraintName("Guardian_FK");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.User", "PatientNavigation")
                        .WithOne("PatientNavigation")
                        .HasForeignKey("AppointmentSchedulingApp.Domain.Entities.Patient", "PatientId")
                        .IsRequired()
                        .HasConstraintName("Patient_FK");

                    b.Navigation("Guardian");

                    b.Navigation("PatientNavigation");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Payment", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Receptionist", "Receptionist")
                        .WithMany("Payments")
                        .HasForeignKey("ReceptionistId")
                        .HasConstraintName("FK_Payments_Receptionist");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Reservation", "Reservation")
                        .WithMany("Payments")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_Payments_Reservation");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Payments_User");

                    b.Navigation("Receptionist");

                    b.Navigation("Reservation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Post", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Doctor", "PostAuthor")
                        .WithMany("Posts")
                        .HasForeignKey("PostAuthorId")
                        .HasConstraintName("Post_FK");

                    b.Navigation("PostAuthor");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.PostSection", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Post", "Post")
                        .WithMany("PostSections")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("Section_FK1");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Receptionist", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.User", "ReceptionistNavigation")
                        .WithOne("Receptionist")
                        .HasForeignKey("AppointmentSchedulingApp.Domain.Entities.Receptionist", "ReceptionistId")
                        .IsRequired()
                        .HasConstraintName("FK_Receptionists_User");

                    b.Navigation("ReceptionistNavigation");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.DoctorSchedule", "DoctorSchedule")
                        .WithMany("Reservations")
                        .HasForeignKey("DoctorScheduleId")
                        .HasConstraintName("FK_DoctorSchedule");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Patient", "Patient")
                        .WithMany("Reservations")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("PatientId_FK");

                    b.Navigation("DoctorSchedule");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Service", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Specialty", "Specialty")
                        .WithMany("Services")
                        .HasForeignKey("SpecialtyId")
                        .IsRequired()
                        .HasConstraintName("FK__Services__Specia__628FA481");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("DeviceService", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Device", null)
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__DeviceSer__Devic__72C60C4A");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__DeviceSer__Servi__71D1E811");
                });

            modelBuilder.Entity("DoctorService", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK__DoctorSer__Docto__75A278F5");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__DoctorSer__Servi__76969D2E");
                });

            modelBuilder.Entity("DoctorSpecialty", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK__DoctorSpe__Docto__5441852A");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Specialty", null)
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .IsRequired()
                        .HasConstraintName("FK__DoctorSpe__Speci__5535A963");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("Role_FK");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("User_FK");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("DoctorSchedules");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.DoctorSchedule", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostSections");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Receptionist", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Reservation", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("MedicalRecords");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Room", b =>
                {
                    b.Navigation("DoctorSchedules");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Service", b =>
                {
                    b.Navigation("DoctorSchedules");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Slot", b =>
                {
                    b.Navigation("DoctorSchedules");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Specialty", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Doctor");

                    b.Navigation("PatientGuardians");

                    b.Navigation("PatientNavigation");

                    b.Navigation("Payments");

                    b.Navigation("Receptionist");
                });
#pragma warning restore 612, 618
        }
    }
}
