// <auto-generated />
using System;
using AppointmentSchedulingApp.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppointmentSchedulingApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppointmentSchedulingDbContext))]
    [Migration("20250304201747_AddIdentityAuthentication")]
    partial class AddIdentityAuthentication
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Categori__19093A0BFFF2A0D1");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Certification", b =>
                {
                    b.Property<int>("CertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificationId"));

                    b.Property<string>("CertificationUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("CertificationId")
                        .HasName("PK__Certific__1237E58A3720D143");

                    b.HasIndex("DoctorId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviceId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Functionality")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("DeviceId")
                        .HasName("PK__Devices__49E1231180B6D9C3");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("AcademicTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentWork")
                        .HasColumnType("text");

                    b.Property<string>("Degree")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DoctorDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("Prize")
                        .HasColumnType("text");

                    b.Property<string>("ResearchProject")
                        .HasColumnType("text");

                    b.Property<string>("TrainingProcess")
                        .HasColumnType("text");

                    b.Property<string>("WorkExperience")
                        .HasColumnType("text");

                    b.HasKey("DoctorId")
                        .HasName("PK__Doctors__2DC00EBFB42CF4E4");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.DoctorSchedule", b =>
                {
                    b.Property<int>("DoctorScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorScheduleId"));

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.HasKey("DoctorScheduleId")
                        .HasName("PK__DoctorSc__8B4DFC5C74A646E3");

                    b.HasIndex("DoctorId");

                    b.HasIndex("RoomId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SlotId");

                    b.ToTable("DoctorSchedules");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("DoctorFeedbackContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DoctorFeedbackGrade")
                        .HasColumnType("int");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceFeedbackContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ServiceFeedbackGrade")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__6A4BEDD6B9B76644");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("Symptoms")
                        .HasColumnType("text");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("text");

                    b.HasKey("MedicalRecordId")
                        .HasName("PK__MedicalR__4411BA220AFBCBE9");

                    b.HasIndex("ReservationId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("PatientId")
                        .HasName("PK__Patients__970EC3666A4E94A9");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DoctorScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PriorExaminationImg")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ReservationId")
                        .HasName("PK__Reservat__B7EE5F24B93F8BE2");

                    b.HasIndex("DoctorScheduleId");

                    b.HasIndex("PatientId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "acccef8b-20f3-4de0-8ee9-5a3690f094ed",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "1a777fbf-24db-4247-bd76-db376d703ea9",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoomId")
                        .HasName("PK__Rooms__328639393390FD2C");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValue("https://th.bing.com/th/id/OIP.ITpfvpcflBQwxt--PL_WegHaEc?w=252&h=180&c=7&r=0&o=5&dpr=1.3&pid=1.7");

                    b.Property<string>("Overview")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Process")
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentTechniques")
                        .HasColumnType("text");

                    b.HasKey("ServiceId")
                        .HasName("PK__Services__C51BB00AA5CD56C8");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Slot", b =>
                {
                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("SlotEndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<TimeOnly?>("SlotStartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("SlotId")
                        .HasName("PK__Slots__0A124AAF03E41AA4");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Specialty", b =>
                {
                    b.Property<int>("SpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialtyId"));

                    b.Property<string>("Image")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValue("https://th.bing.com/th/id/OIP.5kVbDAdvd-TbbhL31d-2sgHaE4?w=264&h=180&c=7&r=0&o=5&dpr=1.3&pid=1.7");

                    b.Property<string>("SpecialtyDescription")
                        .HasColumnType("text");

                    b.Property<string>("SpecialtyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SpecialtyId")
                        .HasName("PK__Specialt__D768F6A828B9E8B3");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<long>("CitizenId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<bool>("IsVerify")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "CitizenId" }, "CitizenId_Unique")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "Email_Unique")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex(new[] { "PhoneNumber" }, "Phone_Unique")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("DeviceService", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "DeviceId")
                        .HasName("PK__DeviceSe__C185A23B1C17D30A");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceServices", (string)null);
                });

            modelBuilder.Entity("DeviceSpecialty", b =>
                {
                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.HasKey("SpecialtyId", "DeviceId")
                        .HasName("PK__DeviceSp__D3F6E499279A3B83");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceSpecialties", (string)null);
                });

            modelBuilder.Entity("DoctorService", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "ServiceId")
                        .HasName("PK__DoctorSe__9191B5BFE26F8888");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorServices", (string)null);
                });

            modelBuilder.Entity("DoctorSpecialty", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "SpecialtyId")
                        .HasName("PK__DoctorSp__B0B681D58FD60A70");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("DoctorSpecialties", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Certification", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Certifications")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("Certification_FK");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.User", "DoctorNavigation")
                        .WithOne("Doctor")
                        .HasForeignKey("AppointmentSchedulingApp.Domain.Entities.Doctor", "DoctorId")
                        .IsRequired()
                        .HasConstraintName("Doctor_FK");

                    b.Navigation("DoctorNavigation");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.DoctorSchedule", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("DoctorId_FK");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Room", "Room")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("RoomId_FK");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Service", "Service")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("ServiceId_FK");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Slot", "Slot")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("SlotId_FK");

                    b.Navigation("Doctor");

                    b.Navigation("Room");

                    b.Navigation("Service");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Reservation", "Reservation")
                        .WithOne("Feedback")
                        .HasForeignKey("AppointmentSchedulingApp.Domain.Entities.Feedback", "ReservationId")
                        .IsRequired()
                        .HasConstraintName("ReservationId_FK");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.MedicalRecord", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Reservation", "Reservation")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservationId");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Patient", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.User", "PatientNavigation")
                        .WithOne("Patient")
                        .HasForeignKey("AppointmentSchedulingApp.Domain.Entities.Patient", "PatientId")
                        .IsRequired()
                        .HasConstraintName("Patient_FK");

                    b.Navigation("PatientNavigation");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.DoctorSchedule", "DoctorSchedule")
                        .WithMany("Reservations")
                        .HasForeignKey("DoctorScheduleId")
                        .IsRequired()
                        .HasConstraintName("DoctorScheduleId_FK");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Patient", "Patient")
                        .WithMany("Reservations")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("PatientId_FK");

                    b.Navigation("DoctorSchedule");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Service", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("CategoryId_FK");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Specialty", "Specialty")
                        .WithMany("Services")
                        .HasForeignKey("SpecialtyId")
                        .IsRequired()
                        .HasConstraintName("SpecialtyId_FK");

                    b.Navigation("Category");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DeviceService", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Device", null)
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__DeviceSer__Devic__68487DD7");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__DeviceSer__Servi__6754599E");
                });

            modelBuilder.Entity("DeviceSpecialty", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Device", null)
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK__DeviceSpe__Devic__45F365D3");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Specialty", null)
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .IsRequired()
                        .HasConstraintName("FK__DeviceSpe__Speci__44FF419A");
                });

            modelBuilder.Entity("DoctorService", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK__DoctorSer__Docto__6B24EA82");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__DoctorSer__Servi__6C190EBB");
                });

            modelBuilder.Entity("DoctorSpecialty", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK__DoctorSpe__Docto__4BAC3F29");

                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Specialty", null)
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .IsRequired()
                        .HasConstraintName("FK__DoctorSpe__Speci__4CA06362");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AppointmentSchedulingApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Category", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("DoctorSchedules");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.DoctorSchedule", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Reservation", b =>
                {
                    b.Navigation("Feedback")
                        .IsRequired();

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Room", b =>
                {
                    b.Navigation("DoctorSchedules");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Service", b =>
                {
                    b.Navigation("DoctorSchedules");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Slot", b =>
                {
                    b.Navigation("DoctorSchedules");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.Specialty", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("AppointmentSchedulingApp.Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
