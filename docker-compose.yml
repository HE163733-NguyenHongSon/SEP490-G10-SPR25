version: "3.8"

services:
  backend:
    build:
      context: ./BE-SEP490-G10-SPR25
      dockerfile: Dockerfile
    ports:
      - "5220:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - app-network
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5

  frontend:
    build:
      context: ./FE-SEP490-G10-SPR25
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:5220/api            
      - NODE_ENV=production
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: "Password12345!"
      ACCEPT_EULA: "Y"
    ports:
      - "1435:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "Password12345!", "-Q", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  sqlserver_data:
    driver: local

networks:
  app-network:
    driver: bridge
